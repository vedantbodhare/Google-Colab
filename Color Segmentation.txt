# --- Install Libraries ---
!pip install opencv-python-headless matplotlib scikit-learn

# --- Import Libraries ---
import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from google.colab import files
import os

# --- Upload Image ---
uploaded = files.upload()

# Read uploaded image
image_name = list(uploaded.keys())[0]
image = cv2.imread(image_name)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Show original image
plt.figure(figsize=(6,6))
plt.title("Original Image")
plt.axis('off')
plt.imshow(image)
plt.show()

# --- Preprocessing for Segmentation ---
pixels = image.reshape((-1, 3))
pixels = np.float32(pixels) / 255.0

# --- Apply KMeans Clustering ---
k = 5  # Number of color clusters (change if you want)
kmeans = KMeans(n_clusters=k, random_state=42)
labels = kmeans.fit_predict(pixels)
palette = kmeans.cluster_centers_

# Reconstruct segmented image
segmented_img = palette[labels].reshape(image.shape)
segmented_img = (segmented_img * 255).astype(np.uint8)

# --- Display the full segmented image ---
plt.figure(figsize=(6,6))
plt.title(f"Full Segmented Image with {k} Colors")
plt.axis('off')
plt.imshow(segmented_img)
plt.show()

# --- Create and Save Separate Slides for Each Color ---
output_folder = "color_slides"
os.makedirs(output_folder, exist_ok=True)

h, w, _ = image.shape
labels_2d = labels.reshape((h, w))

for cluster_idx in range(k):
    # Create a mask for the current color
    mask = (labels_2d == cluster_idx)
    
    # Create a blank canvas
    blank = np.zeros_like(image, dtype=np.uint8)
    
    # Fill only the masked area with the cluster color
    color = (palette[cluster_idx] * 255).astype(np.uint8)
    blank[mask] = color

    # Show each color slide
    plt.figure(figsize=(6,6))
    plt.title(f"Color Cluster {cluster_idx+1}")
    plt.axis('off')
    plt.imshow(blank)
    plt.show()
    
    # Save each slide
    output_path = os.path.join(output_folder, f"color_cluster_{cluster_idx+1}.png")
    cv2.imwrite(output_path, cv2.cvtColor(blank, cv2.COLOR_RGB2BGR))

print(f"\nâœ… All {k} color cluster slides saved in the folder: {output_folder}")
