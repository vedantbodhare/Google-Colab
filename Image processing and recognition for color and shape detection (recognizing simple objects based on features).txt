# Install OpenCV if not installed
!pip install opencv-python-headless

# Import libraries
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Upload an image
from google.colab import files
uploaded = files.upload()

for file_name in uploaded.keys():
    image_path = file_name

# Read and resize the image
image = cv2.imread(image_path)
resized = cv2.resize(image, (600, 400))
blurred = cv2.GaussianBlur(resized, (5, 5), 0)

# Convert to grayscale and detect edges
gray = cv2.cvtColor(blurred, cv2.COLOR_BGR2GRAY)
edged = cv2.Canny(gray, 50, 150)

# Find contours
cnts, _ = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Define a color range dictionary (HSV ranges)
color_ranges = {
    'red': [(0, 70, 50), (10, 255, 255)],
    'red2': [(170, 70, 50), (180, 255, 255)],  # for upper red
    'green': [(36, 25, 25), (86, 255,255)],
    'blue': [(94, 80, 2), (126, 255, 255)],
    'yellow': [(15, 150, 150), (35, 255, 255)],
    'orange': [(10, 100, 20), (25, 255, 255)],
    'purple': [(129, 50, 70), (158, 255, 255)],
    'cyan': [(85, 100, 100), (95, 255, 255)],
    'pink': [(160, 100, 100), (170, 255, 255)],
    'white': [(0, 0, 200), (180, 55, 255)],
    'black': [(0, 0, 0), (180, 255, 30)]
}

# Convert image to HSV
hsv = cv2.cvtColor(resized, cv2.COLOR_BGR2HSV)

# Function to detect shape
def detect_shape(c):
    shape = "unidentified"
    peri = cv2.arcLength(c, True)
    approx = cv2.approxPolyDP(c, 0.04 * peri, True)
    sides = len(approx)

    if sides == 3:
        shape = "triangle"
    elif sides == 4:
        (x, y, w, h) = cv2.boundingRect(approx)
        ar = w / float(h)
        shape = "square" if 0.95 <= ar <= 1.05 else "rectangle"
    elif sides == 5:
        shape = "pentagon"
    elif sides == 6:
        shape = "hexagon"
    else:
        shape = "circle" if sides > 6 else "unidentified"
    return shape

# Function to detect color
def detect_color(hsv_img, c):
    mask = np.zeros(hsv_img.shape[:2], dtype="uint8")
    cv2.drawContours(mask, [c], -1, 255, -1)
    mean = cv2.mean(hsv_img, mask=mask)[:3]

    h, s, v = mean

    for color_name, (lower, upper) in color_ranges.items():
        lower = np.array(lower, dtype="uint8")
        upper = np.array(upper, dtype="uint8")
        if lower[0] <= h <= upper[0] and lower[1] <= s <= upper[1] and lower[2] <= v <= upper[2]:
            return color_name.replace('2', '')  # handle red2 as red
    return "unknown"

# Loop over contours
for c in cnts:
    if cv2.contourArea(c) < 400:
        continue  # ignore very small areas

    M = cv2.moments(c)
    if M["m00"] == 0:
        continue

    cX = int(M["m10"] / M["m00"])
    cY = int(M["m01"] / M["m00"])

    shape = detect_shape(c)
    color = detect_color(hsv, c)

    # Draw the contour and name
    cv2.drawContours(resized, [c], -1, (0, 255, 0), 2)
    text = f"{color} {shape}"
    cv2.putText(resized, text, (cX - 50, cY),
                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

# Convert BGR to RGB
resized_rgb = cv2.cvtColor(resized, cv2.COLOR_BGR2RGB)

# Display the output
plt.figure(figsize=(12, 8))
plt.imshow(resized_rgb)
plt.axis('off')
plt.title('Detected Colors and Shapes')
plt.show()
